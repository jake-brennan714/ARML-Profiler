package net.jakebrennan.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ArmlPlayerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArmlPlayerAllPropertiesEquals(ArmlPlayer expected, ArmlPlayer actual) {
        assertArmlPlayerAutoGeneratedPropertiesEquals(expected, actual);
        assertArmlPlayerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArmlPlayerAllUpdatablePropertiesEquals(ArmlPlayer expected, ArmlPlayer actual) {
        assertArmlPlayerUpdatableFieldsEquals(expected, actual);
        assertArmlPlayerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArmlPlayerAutoGeneratedPropertiesEquals(ArmlPlayer expected, ArmlPlayer actual) {
        assertThat(expected)
            .as("Verify ArmlPlayer auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArmlPlayerUpdatableFieldsEquals(ArmlPlayer expected, ArmlPlayer actual) {
        assertThat(expected)
            .as("Verify ArmlPlayer relevant properties")
            .satisfies(e -> assertThat(e.getPlayerID()).as("check playerID").isEqualTo(actual.getPlayerID()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getTenhouName()).as("check tenhouName").isEqualTo(actual.getTenhouName()))
            .satisfies(e -> assertThat(e.getLeague()).as("check league").isEqualTo(actual.getLeague()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArmlPlayerUpdatableRelationshipsEquals(ArmlPlayer expected, ArmlPlayer actual) {
        assertThat(expected)
            .as("Verify ArmlPlayer relationships")
            .satisfies(e -> assertThat(e.getGames()).as("check games").isEqualTo(actual.getGames()));
    }
}
